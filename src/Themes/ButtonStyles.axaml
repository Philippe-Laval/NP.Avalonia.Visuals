<!-- (c) Nick Polyak 2021 - http://awebpros.com/
      License: MIT License (https://opensource.org/licenses/MIT)
 
      short overview of copyright rules:
      1. you can use this framework in any commercial or non-commercial
         product as long as you retain this copyright message
      2. Do not blame the author of this software if something goes wrong.
 
      Also, please, mention this software in any documentation for the
      products that use it.
-->

<Styles xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:behaviors="clr-namespace:NP.Avalonia.Visuals.Behaviors"
        xmlns:controls="clr-namespace:NP.Avalonia.Visuals.Controls">
    <Style Selector=":is(Button).IconButton">
      <Setter Property="controls:AttachedProperties.IconStretch"
              Value="Uniform"/>
      <Setter Property="controls:AttachedProperties.RealBackground"
              Value="{Binding Path=Background, RelativeSource={RelativeSource Self}}"/>
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="Button">
            <Border x:Name="IconBorder"
                    Background="{TemplateBinding (controls:AttachedProperties.RealBackground)}">
              <Path Data="{TemplateBinding (controls:AttachedProperties.IconData)}"
                    Fill="{TemplateBinding Foreground}"
                    Stretch="{TemplateBinding (controls:AttachedProperties.IconStretch)}"
                    Margin="{TemplateBinding (controls:AttachedProperties.IconMargin)}"
                    Width="{TemplateBinding (controls:AttachedProperties.IconWidth)}"
                    Height="{TemplateBinding (controls:AttachedProperties.IconHeight)}"/>
            </Border>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
    </Style>
    <Style Selector=":is(Button).IconButton:pointerover">
      <Setter Property="controls:AttachedProperties.RealBackground"
              Value="{Binding Path=(controls:AttachedProperties.MouseOverBrush), RelativeSource={RelativeSource Self}}"/>
    </Style>
    <Style Selector=":is(Button).IconButton:pressed">
      <Setter Property="controls:AttachedProperties.RealBackground"
              Value="{Binding Path=Background, RelativeSource={RelativeSource Self}}"/>
    </Style>
    <Style Selector=":is(Button).HeaderIconButton">
      <Setter Property="Opacity"
          Value="0.5"/>
      <Setter Property="Background"
              Value="Transparent"/>
      <Setter Property="controls:AttachedProperties.MouseOverBrush"
          Value="LightGray"/>
      <Setter Property="Foreground"
              Value="Black"/>
      <Setter Property="controls:AttachedProperties.IconWidth"
              Value="12"/>
      <Setter Property="controls:AttachedProperties.IconHeight"
              Value="12"/>
      <Setter Property="VerticalAlignment"
          Value="Stretch"/>
      <Setter Property="behaviors:CallAction.TheEvent"
              Value="{x:Static Button.ClickEvent}"/>
    </Style>

    <Style Selector=":is(Button).WindowIconButton">
      <Setter Property="Width"
              Value="35"/>
      <Setter Property="behaviors:ClassesBehavior.InsertClasses"
              Value="HeaderIconButton"/>
      <Setter Property="controls:AttachedProperties.IconMargin"
              Value="5"/>
    </Style>
  
    <Style Selector=":is(Button).IconButton:disabled">
      <Setter Property="IsHitTestVisible"
              Value="False"/>
      <Setter Property="Opacity"
              Value="0.2"/>
    </Style>

    <Style Selector="ToggleButton.IconToggleButton[IsChecked=True]">
      <Setter Property="Opacity"
              Value="1"/>
      <Setter Property="Foreground"
              Value="DarkBlue"/>
    </Style>

    <Style Selector="ToggleButton.AlternateIconToggleButton">
      <Setter Property="controls:AttachedProperties.IconData"
              Value="{Binding Path=(controls:AttachedProperties.PrimaryIconData), 
                                RelativeSource={RelativeSource Self}}"/>
    </Style>

	<Style Selector="ToggleButton.AlternateIconToggleButton[IsChecked=True]">
		<Setter Property="controls:AttachedProperties.IconData"
                Value="{Binding Path=(controls:AttachedProperties.AlternateIconData), 
                                RelativeSource={RelativeSource Self}}"/>
	</Style>
</Styles>
