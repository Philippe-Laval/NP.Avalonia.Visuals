<Styles xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:np="https://np.com/visuals">
	<Styles.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceInclude Source="avares://NP.Avalonia.Visuals/Themes/ThemeResources.axaml"/>
			</ResourceDictionary.MergedDictionaries>
			<DataTemplate x:Key="TextAndIconDataTemplate">
				<np:AutoGrid>
					<TextBlock Text="{Binding $parent[TemplatedControl].(np:AttachedProperties.Text)}"
							   TextWrapping="{Binding $parent[TemplatedControl].(np:AttachedProperties.TheTextWrapping)}"
							   TextAlignment="{Binding $parent[TemplatedControl].(np:AttachedProperties.TheTextAlignment)}"
							   TextTrimming="{Binding $parent[TemplatedControl].(np:AttachedProperties.TheTextTrimming)}"
							   HorizontalAlignment="{Binding $parent[TemplatedControl].(np:AttachedProperties.TextHorizontalAlignment)}"
							   VerticalAlignment="{Binding $parent[TemplatedControl].(np:AttachedProperties.TextVerticalAlignment)}"/>
					<Path Data="{Binding $parent[TemplatedControl].(np:AttachedProperties.IconData)}"
						  Fill="{Binding $parent[TemplatedControl].Foreground}"
						  Margin="{Binding $parent[TemplatedControl].(np:AttachedProperties.IconMargin)}"
						  Stretch="{Binding $parent[TemplatedControl].(np:AttachedProperties.IconStretch)}"
						  Width="{Binding $parent[TemplatedControl].(np:AttachedProperties.IconWidth)}"
						  Height="{Binding $parent[TemplatedControl].(np:AttachedProperties.IconHeight)}"
						  HorizontalAlignment="{Binding $parent[TemplatedControl].(np:AttachedProperties.IconHorizontalAlignment)}"
						  VerticalAlignment="{Binding $parent[TemplatedControl].(np:AttachedProperties.IconVerticalAlignment)}"
						  np:AutoGrid.Row="{Binding $parent[TemplatedControl].(np:AttachedProperties.IconRow)}"
						  np:AutoGrid.Column="{Binding $parent[TemplatedControl].(np:AttachedProperties.IconColumn)}"/>
				</np:AutoGrid>
			</DataTemplate>
		</ResourceDictionary>
	</Styles.Resources>
	<Style Selector="Button.Theme">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Grid>
						<Border x:Name="BackgroundBorder"
								Background="{TemplateBinding Background}"
								BorderThickness="{TemplateBinding BorderThickness}"
								CornerRadius="{TemplateBinding CornerRadius}"
								Focusable="False">
							<Border.BorderBrush>
								<MultiBinding Converter="{StaticResource BorderBrushConverter}">
									<Binding Path="BorderBrush"
											 RelativeSource="{RelativeSource TemplatedParent}"/>
									<Binding Path="IsFocused"
											 Converter="{StaticResource FocusedBorderBrushConverter}"
											 RelativeSource="{RelativeSource TemplatedParent}"/>
								</MultiBinding>
							</Border.BorderBrush>
						</Border>

						<ContentPresenter Content="{TemplateBinding Content}"
										  ContentTemplate="{TemplateBinding ContentTemplate}"
										  Margin="{TemplateBinding Padding}"
										  IsHitTestVisible="False"
										  Focusable="False"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						<Border x:Name="OpacityBorder"
								Background="{StaticResource MostProminentInvertedBrush}"
								Focusable="False"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								CornerRadius="{TemplateBinding CornerRadius}">
							<Border.Opacity>
								<MultiBinding Converter="{StaticResource TheOpacityConverter}">
									<Binding Path="IsPointerOver"
											 Converter="{StaticResource PointerOverOpacityConverter}"
											 RelativeSource="{RelativeSource TemplatedParent}"/>
									<Binding Path="IsPressed"
											 FallbackValue="0.05"
											 Converter="{StaticResource IsPressedOpacityConverter}"
											 RelativeSource="{RelativeSource TemplatedParent}"/>
								</MultiBinding>
							</Border.Opacity>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Background"
				Value="{StaticResource ControlBackground}"/>
		<Setter Property="BorderBrush"
				Value="{StaticResource ControlBorderBrush}"/>
		<Setter Property="Foreground"
				Value="{StaticResource PrimaryForegroundBrush}"/>
		<Setter Property="HorizontalContentAlignment"
				Value="Center"/>
		<Setter Property="VerticalContentAlignment"
				Value="Center"/>
		<Setter Property="CornerRadius"
				Value="4"/>
		<Setter Property="BorderThickness"
				Value="2"/>
		<Setter Property="Opacity"
				Value="{Binding Path=IsEnabled,
								Converter={StaticResource IsEnabledOpacityConverter},
								RelativeSource={RelativeSource Self}}" />
		<Setter Property="Padding"
				Value="10,5" />
	</Style>

	<Style Selector="Button.Theme_WithIcon">
		<Setter Property="ContentTemplate"
				Value="{StaticResource TextAndIconDataTemplate}"/>
		<Setter Property="np:AttachedProperties.IconStretch"
				Value="Uniform"/>
		<Setter Property="np:AttachedProperties.IconHeight">
			<Setter.Value>
				<MultiBinding Converter="{x:Static np:SumConverter.Instance}">
					<Binding Path="FontSize"
							 RelativeSource="{RelativeSource Self}"/>
					<np:ValueBinding x:TypeArguments="x:Double"
									 Value="-1"/>
				</MultiBinding>
			</Setter.Value>
		</Setter>
	</Style>

	<Style Selector="Button.Theme_WithIconHorizontal">
		<Setter Property="np:ClassesBehavior.InsertClasses"
				Value="Theme Theme_WithIcon"/>
		<Setter Property="np:AttachedProperties.IconMargin"
				Value="5,0,0,0"/>
		<Setter Property="np:AttachedProperties.IconColumn"
				Value="1"/>
	</Style>

	<Style Selector="Button.Theme_WithIconVertical">
		<Setter Property="np:ClassesBehavior.InsertClasses"
				Value="Theme Theme_WithIcon"/>
		<Setter Property="np:AttachedProperties.IconMargin"
				Value="0,3,0,2"/>
		<Setter Property="np:AttachedProperties.IconRow"
				Value="1"/>
	</Style>

	<Style Selector=":is(np|LabeledControl)">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="np:LabeledControl">
					<np:AutoGrid>
						<TextBlock Text="{TemplateBinding Text}"
								   HorizontalAlignment="{TemplateBinding HorizontalTextAlignment}"
								   VerticalAlignment="{TemplateBinding VerticalTextAlignment}"/>
						<TemplatedControl Template="{TemplateBinding ContainedControlTemplate}"
										  Margin="{TemplateBinding Padding}"
										  HorizontalAlignment="{TemplateBinding HorizontalContainedControlAlignment}"
										  VerticalAlignment="{TemplateBinding VerticalContainedControlAlignment}"
										  np:AutoGrid.Row="{TemplateBinding ControlRow}"
										  np:AutoGrid.Column="{TemplateBinding ControlColumn}"/>
					</np:AutoGrid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Foreground"
				Value="{StaticResource SecondaryForegroundBrush}"/>
		<Setter Property="HorizontalContainedControlAlignment"
				Value="Left"/>
		<Setter Property="Padding"
				Value="10,3,0,0"/>
		<Setter Property="ControlRow"
				Value="1"/>
	</Style>
</Styles>
